Шаг первый
    Подключите проект, созданный в предыдущем домашнем задании, к базе данных.
    Создайте в нем таблицу employee.
    Реализуйте в проекте взаимодействие пяти эндпоинтов с БД с помощью интерфейсов Spring Data JPA.
    Учтите, что внешние методы сервисов должны возвращать DTO.

Шаг второй
Создайте в БД таблицу position, связанную с таблицей employee типом связи «один ко многим».

Реализуйте следующие REST-методы в приложении для учета сотрудников:

    GET-запрос localhost:8080/employees/withHighestSalary.
    Он должен возвращать информацию о сотрудниках с самой высокой зарплатой в фирме;

    GET-запрос localhost:8080/employees?position=.
    Он должен принимать на вход опциональный параметр position и возвращать информацию о всех сотрудниках фирмы,
    указанной в параметре должности. Если параметр не указан, то возвращать необходимо всех сотрудников.

    GET-запрос localhost:8080/employees/{id}/fullInfo.
    Он должен возвращать полную информацию о сотруднике (имя, зарплата, название должности) с
    переданным в пути запроса идентификатором.

    GET-запрос localhost:8080/employees/page?page=.
    Он должен возвращать информацию о сотрудниках, основываясь на номере страницы. Если страница не указана, то возвращается
    первая страница. Номера страниц начинаются с 0. Лимит на количество сотрудников на странице — 10 человек.

Критерии
В случае возникновения ошибки в ходе работы приложения необходимо возвращать 400-й статус и причину ошибки.
В случае неверно переданного id работника необходимо возвращать 400-й статус и соответствующее описание ошибки.
Чтобы при запущенном приложении можно было пользоваться страницей http://localhost:8080/swagger-ui.html,
реализуйте спецификацию Swagger UI.
Приложение должно следовать паттерну Controller-Service-Repository.Внешние методы сервисов должны возвращать DTO.
Реализуйте приложения, используя подход «сверху-вниз», то есть сначала создайте контроллер с эндпоинтами,
а потом внутреннюю логику для каждого эндпоинта.